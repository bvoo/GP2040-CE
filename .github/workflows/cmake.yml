name: CMake

on:
  push:
    branches: [ "20240419-GRAM-SlimFGC" ]
  pull_request:
    branches: [ "20240419-GRAM-SlimFGC" ]
#  pull_request_target:
#    branches: [ "main" ]
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-build]

env:
  BUILD_TYPE: Release

jobs:
  call-node-workflow:
    uses: ./.github/workflows/node.js.yml
  build:
    needs: call-node-workflow
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        GP2040_BOARDCONFIG:
          [GramSlimFGC]

    steps:
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.17.x'
    - name: Verify cmake
      run: cmake --version

    #Global Setup
    - name: Checkout GP2040-CE
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Setup SDK pipeline
      uses: Fortinbra/RaspberryPiPicoBuild@v6

    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.2
      with:
        name: fsData
        path: ${{github.workspace}}/lib/httpd/

    - name: Get core count
      id: core_count
      run : cat /proc/cpuinfo  | grep processor | wc -l
      #End Global Setup

    - name: Pico Build Configure CMake
      shell: bash
      if: ${{ matrix.GP2040_BOARDCONFIG != 'PicoW'}}
      run: PICO_SDK_PATH=${{github.workspace}}/pico-sdk GP2040_BOARDCONFIG=${{ matrix.GP2040_BOARDCONFIG }} SKIP_WEBBUILD=TRUE cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: PicoW Build Configure CMake
      shell: bash
      if: ${{ matrix.GP2040_BOARDCONFIG == 'PicoW'}}
      run: PICO_SDK_PATH=${{github.workspace}}/pico-sdk GP2040_BOARDCONFIG=${{ matrix.GP2040_BOARDCONFIG }} SKIP_WEBBUILD=TRUE cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DPICO_BOARD=pico_w

    - name: Pico Build
      shell: bash
      run: GP2040_BOARDCONFIG=${{ matrix.GP2040_BOARDCONFIG }} cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}}

    - name: Upload Pico Artifact
      uses: actions/upload-artifact@v4.3.1
      with:
        name: GP2040-CE - ${{ matrix.GP2040_BOARDCONFIG }}
        path: ${{github.workspace}}/build/GP2040-CE_*_${{ matrix.GP2040_BOARDCONFIG }}.uf2
        if-no-files-found: error

    - name: Upload .elf Artifact
      if: ${{ matrix.GP2040_BOARDCONFIG == 'Pico'}}
      uses: actions/upload-artifact@v4.3.1
      with:
        name: elf
        path: ${{github.workspace}}/build/GP2040-CE_*_${{ matrix.GP2040_BOARDCONFIG }}.elf
        if-no-files-found: error
        
    # Extract version information
    - name: Extract version information
      id: version
      run: |
        # Get Git version info
        GIT_VERSION=$(git describe --tags --always --dirty --abbrev=7)
        echo "git_version=$GIT_VERSION" >> $GITHUB_OUTPUT
        echo "Found git version: $GIT_VERSION"
        
        # Get the actual UF2 filename
        UF2_FILE=$(ls ${{github.workspace}}/build/GP2040-CE_*_${{ matrix.GP2040_BOARDCONFIG }}.uf2)
        echo "uf2_file=$UF2_FILE" >> $GITHUB_OUTPUT
        echo "UF2 file: $UF2_FILE"
        
        # Set upstream info variables
        UPSTREAM_TAG="${{ github.event.client_payload.upstream_tag }}"
        UPSTREAM_COMMIT="${{ github.event.client_payload.upstream_commit }}"
        
        # If this is triggered by repository_dispatch, use upstream info
        if [[ -n "$UPSTREAM_TAG" && -n "$UPSTREAM_COMMIT" ]]; then
          echo "upstream_tag=$UPSTREAM_TAG" >> $GITHUB_OUTPUT
          echo "upstream_commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
          echo "Using upstream tag: $UPSTREAM_TAG, commit: $UPSTREAM_COMMIT"
        fi
        
        # Create a new filename with version information
        BASE_NAME=$(basename "$UF2_FILE")
        if [[ -n "$UPSTREAM_TAG" ]]; then
          NEW_NAME="${BASE_NAME%.uf2}_${UPSTREAM_TAG}.uf2"
        else
          NEW_NAME="${BASE_NAME%.uf2}_${GIT_VERSION}.uf2"
        fi
        cp "$UF2_FILE" "${{github.workspace}}/build/$NEW_NAME"
        echo "versioned_uf2_file=${{github.workspace}}/build/$NEW_NAME" >> $GITHUB_OUTPUT
        echo "Created versioned UF2: $NEW_NAME"
        
    # Create a GitHub release
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: |
          ${{ github.event.client_payload.upstream_tag != '' && format('GP2040-CE {0} - {1} (upstream)', github.event.client_payload.upstream_tag, matrix.GP2040_BOARDCONFIG) || format('GP2040-CE {0} - {1}', steps.version.outputs.git_version, matrix.GP2040_BOARDCONFIG) }}
        tag_name: |
          ${{ github.event.client_payload.upstream_tag != '' && format('upstream-{0}', github.event.client_payload.upstream_tag) || format('build-{0}', steps.version.outputs.git_version) }}
        files: ${{ steps.version.outputs.versioned_uf2_file }}
        body: |
          ${{ github.event.client_payload.upstream_tag != '' && format('Merge from OpenStickCommunity/GP2040-CE {0} (commit {1})', github.event.client_payload.upstream_tag, github.event.client_payload.upstream_commit) || 'Local build' }}
          Board: ${{ matrix.GP2040_BOARDCONFIG }}
          Git version: ${{ steps.version.outputs.git_version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
